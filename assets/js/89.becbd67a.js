(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{454:function(t,e,s){"use strict";s.r(e);var a=s(46),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[t._v("#")]),t._v(" 部署")]),t._v(" "),s("h2",{attrs:{id:"通用指南"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通用指南"}},[t._v("#")]),t._v(" 通用指南")]),t._v(" "),s("p",[t._v("如果你用 Vue CLI 处理静态资源并和后端框架一起作为部署的一部分，那么你需要的仅仅是确保 Vue CLI 生成的构建文件在正确的位置，并遵循后端框架的发布方式即可。")]),t._v(" "),s("p",[t._v("如果你独立于后端部署前端应用——也就是说后端暴露一个前端可访问的 API，然后前端实际上是纯静态应用。那么你可以将 "),s("code",[t._v("dist")]),t._v(" 目录里构建的内容部署到任何静态文件服务器中，但要确保正确的 "),s("RouterLink",{attrs:{to:"/zh/config/#publicpath"}},[t._v("publicPath")]),t._v("。")],1),t._v(" "),s("h3",{attrs:{id:"本地预览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地预览"}},[t._v("#")]),t._v(" 本地预览")]),t._v(" "),s("p",[s("code",[t._v("dist")]),t._v(" 目录需要启动一个 HTTP 服务器来访问 (除非你已经将 "),s("code",[t._v("publicPath")]),t._v(" 配置为了一个相对的值)，所以以 "),s("code",[t._v("file://")]),t._v(" 协议直接打开 "),s("code",[t._v("dist/index.html")]),t._v(" 是不会工作的。在本地预览生产环境构建最简单的方式就是使用一个 Node.js 静态文件服务器，例如 "),s("a",{attrs:{href:"https://github.com/zeit/serve",target:"_blank",rel:"noopener noreferrer"}},[t._v("serve"),s("OutboundLink")],1),t._v("：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g serve\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -s 参数的意思是将其架设在 Single-Page Application 模式下")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个模式会处理即将提到的路由问题")]),t._v("\nserve -s dist\n")])])]),s("h3",{attrs:{id:"使用-history-pushstate-的路由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-history-pushstate-的路由"}},[t._v("#")]),t._v(" 使用 "),s("code",[t._v("history.pushState")]),t._v(" 的路由")]),t._v(" "),s("p",[t._v("如果你在 "),s("code",[t._v("history")]),t._v(" 模式下使用 Vue Router，是无法搭配简单的静态文件服务器的。例如，如果你使用 Vue Router 为 "),s("code",[t._v("/todos/42/")]),t._v(" 定义了一个路由，开发服务器已经配置了相应的 "),s("code",[t._v("localhost:3000/todos/42")]),t._v(" 响应，但是一个为生产环境构建架设的简单的静态服务器会却会返回 404。")]),t._v(" "),s("p",[t._v("为了解决这个问题，你需要配置生产环境服务器，将任何没有匹配到静态文件的请求回退到 "),s("code",[t._v("index.html")]),t._v("。Vue Router 的文档提供了"),s("a",{attrs:{href:"https://router.vuejs.org/zh/guide/essentials/history-mode.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用服务器配置指引"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"cors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),s("p",[t._v("如果前端静态内容是部署在与后端 API 不同的域名上，你需要适当地配置 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS",target:"_blank",rel:"noopener noreferrer"}},[t._v("CORS"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"pwa"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pwa"}},[t._v("#")]),t._v(" PWA")]),t._v(" "),s("p",[t._v("如果你使用了 PWA 插件，那么应用必须架设在 HTTPS 上，这样 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API",target:"_blank",rel:"noopener noreferrer"}},[t._v("Service Worker"),s("OutboundLink")],1),t._v(" 才能被正确注册。")]),t._v(" "),s("h2",{attrs:{id:"平台指南"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平台指南"}},[t._v("#")]),t._v(" 平台指南")]),t._v(" "),s("h3",{attrs:{id:"云开发-cloudbase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#云开发-cloudbase"}},[t._v("#")]),t._v(" 云开发 CloudBase")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://cloudbase.net/?site=vuecli",target:"_blank",rel:"noopener noreferrer"}},[t._v("云开发 CloudBase"),s("OutboundLink")],1),t._v(" 是一个云原生一体化的 Serverless 云平台，支持静态网站、容器等多种托管能力，并提供简便的部署工具 "),s("a",{attrs:{href:"https://cloudbase.net/framework.html?site=vuecli",target:"_blank",rel:"noopener noreferrer"}},[t._v("CloudBase Framework"),s("OutboundLink")],1),t._v(") 来一键部署应用。")]),t._v(" "),s("h4",{attrs:{id:"步骤一：安装云开发-cloudbase-cli"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤一：安装云开发-cloudbase-cli"}},[t._v("#")]),t._v(" 步骤一：安装云开发 CloudBase  CLI")]),t._v(" "),s("p",[t._v("CloudBase  CLI 集成了  "),s("a",{attrs:{href:"https://github.com/TencentCloudBase/cloudbase-framework?site=vuecli",target:"_blank",rel:"noopener noreferrer"}},[t._v("CloudBase Framework"),s("OutboundLink")],1),t._v(")  的能力，全局安装 CloudBase  CLI  请运行以下命令：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm install -g @cloudbase/cli\n")])])]),s("h4",{attrs:{id:"步骤二：一键部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤二：一键部署"}},[t._v("#")]),t._v(" 步骤二：一键部署")]),t._v(" "),s("p",[t._v("在项目根目录运行以下命令部署 Vue CLI 创建的应用，在部署之前可以先 "),s("a",{attrs:{href:"https://console.cloud.tencent.com/tcb/env/index?tdl_anchor=ad&tdl_site=vuejs",target:"_blank",rel:"noopener noreferrer"}},[t._v("开通环境"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cloudbase init --without-template\ncloudbase framework:deploy\n")])])]),s("p",[t._v("CloudBase  CLI  首先跳转到控制台进行登录授权，然后将会交互式进行以下步骤")]),t._v(" "),s("ul",[s("li",[t._v("选择一个环境，如果没有可以选择新建环境")]),t._v(" "),s("li",[t._v("自动检测项目并确认构建脚本，输出目录、部署云端路径等信息")])]),t._v(" "),s("p",[t._v("确认信息后会立即进行部署，部署完成后，可以获得一个自动 SSL，CDN 加速的网站应用，你也可以搭配使用 Github Action 来持续部署  Github 上的 Vue 应用。")]),t._v(" "),s("h3",{attrs:{id:"混合部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#混合部署"}},[t._v("#")]),t._v(" 混合部署")]),t._v(" "),s("p",[t._v("除了部署一个纯静态的 Vue CLI 项目之外，还可以快速一键部署混合的全栈 Vue 应用：")]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("code",[t._v("cloudbase init --template vue")]),t._v("  快速创建和部署一个包含 Serverless 云函数后端的 Vue 应用")]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("cloudbase init --template nuxt-ssr")]),t._v(" 快速创建和部署一个包含  SSR 和 Serverless 云函数后端的 Vue 应用")])]),t._v(" "),s("p",[t._v("详细信息请查看  CloudBase Framework 的"),s("a",{attrs:{href:"https://github.com/TencentCloudBase/cloudbase-framework?site=vuecli#%E9%A1%B9%E7%9B%AE%E7%A4%BA%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("部署项目示例"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"github-pages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#github-pages"}},[t._v("#")]),t._v(" GitHub Pages")]),t._v(" "),s("h4",{attrs:{id:"手动推送更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手动推送更新"}},[t._v("#")]),t._v(" 手动推送更新")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在 "),s("code",[t._v("vue.config.js")]),t._v(" 中设置正确的 "),s("code",[t._v("publicPath")]),t._v("。")]),t._v(" "),s("p",[t._v("如果打算将项目部署到 "),s("code",[t._v("https://<USERNAME>.github.io/")]),t._v(" 上, "),s("code",[t._v("publicPath")]),t._v(" 将默认被设为 "),s("code",[t._v('"/"')]),t._v("，你可以忽略这个参数。")]),t._v(" "),s("p",[t._v("如果打算将项目部署到 "),s("code",[t._v("https://<USERNAME>.github.io/<REPO>/")]),t._v(" 上 (即仓库地址为 "),s("code",[t._v("https://github.com/<USERNAME>/<REPO>")]),t._v(")，可将 "),s("code",[t._v("publicPath")]),t._v(" 设为 "),s("code",[t._v('"/<REPO>/"')]),t._v("。举个例子，如果仓库名字为“my-project”，那么 "),s("code",[t._v("vue.config.js")]),t._v(" 的内容应如下所示：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  publicPath"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/my-project/'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("在项目目录下，创建内容如下的 "),s("code",[t._v("deploy.sh")]),t._v(" (可以适当地取消注释) 并运行它以进行部署：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/usr/bin/env sh")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当发生错误时中止脚本")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" -e\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run build\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cd 到构建输出的目录下 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" dist\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 部署到自定义域域名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo 'www.example.com' > CNAME")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -A\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'deploy'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 部署到 https://<USERNAME>.github.io")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 部署到 https://<USERNAME>.github.io/<REPO>")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" -\n")])])])])]),t._v(" "),s("h4",{attrs:{id:"使用-travis-ci-自动更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-travis-ci-自动更新"}},[t._v("#")]),t._v(" 使用 Travis CI 自动更新")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("仿照上面在 "),s("code",[t._v("vue.config.js")]),t._v(" 中设置正确的 "),s("code",[t._v("publicPath")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("安装 Travis CLI 客户端："),s("code",[t._v("gem install travis && travis --login")])])]),t._v(" "),s("li",[s("p",[t._v("生成一个拥有“repo”权限的 GitHub "),s("a",{attrs:{href:"https://help.github.com/cn/articles/creating-a-personal-access-token-for-the-command-line",target:"_blank",rel:"noopener noreferrer"}},[t._v("访问令牌"),s("OutboundLink")],1),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("授予 Travis 访问仓库的权限："),s("code",[t._v("travis set GITHUB_TOKEN=xxx")]),t._v(" ("),s("code",[t._v("xxx")]),t._v(" 是第三步中的个人访问令牌)")])]),t._v(" "),s("li",[s("p",[t._v("在项目根目录下创建一个 "),s("code",[t._v(".travis.yml")]),t._v(" 文件。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("language")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" node_js\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("node_js")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" npm\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" npm run build\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("deploy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("provider")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" pages\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("skip_cleanup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("github_token")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $GITHUB_TOKEN\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("local_dir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dist\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" master\n")])])])]),t._v(" "),s("li",[s("p",[t._v("将 "),s("code",[t._v(".travis.yml")]),t._v(" 文件推送到仓库来触发第一次构建。")])])]),t._v(" "),s("h3",{attrs:{id:"gitlab-pages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-pages"}},[t._v("#")]),t._v(" GitLab Pages")]),t._v(" "),s("p",[t._v("根据 "),s("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/pages/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab Pages 文档"),s("OutboundLink")],1),t._v("的描述，所有的配置都在根目录中的"),s("code",[t._v(".gitlab-ci.yml")]),t._v(" 文件中。下面的范例是一个很好的入门:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# .gitlab-ci.yml 文件应放在你仓库的根目录下 ")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pages")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 必须定义一个名为 pages 的 job")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("latest\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" deploy\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" npm ci\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" npm run build\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mv public public"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("vue "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# GitLab Pages 的钩子设置在 public 文件夹")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mv dist public "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重命名 dist 文件夹 (npm run build 之后的输出位置)")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("artifacts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" public "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# artifact path 一定要在 /public , 这样 GitLab Pages 才能获取")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n")])])]),s("p",[t._v("通常, 你的静态页面将托管在 https://yourUserName.gitlab.io/yourProjectName 上, 所以你可以创建一个 initial "),s("code",[t._v("vue.config.js")]),t._v(" 文件去 "),s("a",{attrs:{href:"https://github.com/vuejs/vue-cli/tree/dev/docs/config#baseurl",target:"_blank",rel:"noopener noreferrer"}},[t._v("更新 "),s("code",[t._v("BASE_URL")]),s("OutboundLink")],1),t._v(" 要匹配的值 ：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vue.config.js 位于仓库的根目录下")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 确保用 GitLab 项目的名称替换了 `YourProjectName`")]),t._v("\n\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  publicPath"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/yourProjectName/'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("请阅读在 "),s("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/pages/getting_started_part_one.html#gitlab-pages-domain",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab Pages domains"),s("OutboundLink")],1),t._v(" 的文档来学习更多关于页面部署 URL 的信息。注意，你也可以"),s("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/pages/getting_started_part_three.html#adding-your-custom-domain-to-gitlab-pages",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用自定义域名"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("在推送到仓库之前提交 "),s("code",[t._v(".gitlab-ci.yml")]),t._v(" 和 "),s("code",[t._v("vue.config.js")]),t._v(" 文件。GitLab CI 的管道将会被触发: 当成功时候, 到 "),s("code",[t._v("Settings > Pages")]),t._v(" 查看关于网站的链接。")]),t._v(" "),s("h3",{attrs:{id:"netlify"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#netlify"}},[t._v("#")]),t._v(" Netlify")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在 Netlify 上，使用以下设置从 GitHub 创建新项目:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("构建命令:")]),t._v(" "),s("code",[t._v("npm run build")]),t._v(" 或 "),s("code",[t._v("yarn build")])]),t._v(" "),s("li",[s("strong",[t._v("发布目录:")]),t._v(" "),s("code",[t._v("dist")])])])]),t._v(" "),s("li",[s("p",[t._v("点击“deploy”按钮！")])])]),t._v(" "),s("p",[t._v("也可以查看 "),s("a",{attrs:{href:"https://github.com/netlify/vue-cli-plugin-netlify-lambda",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-cli-plugin-netlify-lambda"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("如果使用 Vue Router 的 history 模式，你需要在 "),s("code",[t._v("/public")]),t._v(" 目录下创建一个 "),s("code",[t._v("_redirects")]),t._v(" 文件：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 单页应用的 Netlify 设置\n/*    /index.html   200\n")])])]),s("p",[t._v("详细信息请查看 "),s("a",{attrs:{href:"https://www.netlify.com/docs/redirects/#history-pushstate-and-single-page-apps",target:"_blank",rel:"noopener noreferrer"}},[t._v("Netlify 重定向文档"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"render"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#render"}},[t._v("#")]),t._v(" Render")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://render.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Render"),s("OutboundLink")],1),t._v(" 提供带有全托管 SSL，全球 CDN 和 GitHub 持续自动部署的"),s("a",{attrs:{href:"https://render.com/docs/static-sites",target:"_blank",rel:"noopener noreferrer"}},[t._v("免费静态站点托管"),s("OutboundLink")],1),t._v("服务。")]),t._v(" "),s("ol",[s("li",[t._v("在 Render 上创建一个新的 Web Service，并授予 Render 的 GitHub 应用访问你的 Vue 仓库的权限。")]),t._v(" "),s("li",[t._v("在创建过程中使用以下设置：\n"),s("ul",[s("li",[s("strong",[t._v("环境")]),t._v("："),s("code",[t._v("Static Site")])]),t._v(" "),s("li",[s("strong",[t._v("构建命令")]),t._v("："),s("code",[t._v("npm run build")]),t._v(" 或者 "),s("code",[t._v("yarn build")])]),t._v(" "),s("li",[s("strong",[t._v("发布目录")]),t._v("："),s("code",[t._v("dist")])])])])]),t._v(" "),s("p",[t._v("大功告成！构建结束时你的应用便会在你的 Render URL 上线。")]),t._v(" "),s("p",[t._v("如果使用 Vue Router 的 history 模式，你需要在站点的 "),s("code",[t._v("Redirects/Rewrites")]),t._v(" 设置中添加以下改写规则：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Source")]),t._v(": "),s("code",[t._v("/*")])]),t._v(" "),s("li",[s("strong",[t._v("Destination")]),t._v(": "),s("code",[t._v("/index.html")])]),t._v(" "),s("li",[s("strong",[t._v("Status")]),t._v(": "),s("code",[t._v("Rewrite")])])]),t._v(" "),s("p",[t._v("详细信息请查看 Render 的"),s("a",{attrs:{href:"https://render.com/docs/redirects-rewrites",target:"_blank",rel:"noopener noreferrer"}},[t._v("重定向和改写"),s("OutboundLink")],1),t._v("及"),s("a",{attrs:{href:"https://render.com/docs/custom-domains",target:"_blank",rel:"noopener noreferrer"}},[t._v("自定义域名"),s("OutboundLink")],1),t._v("文档。")]),t._v(" "),s("h3",{attrs:{id:"amazon-s3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amazon-s3"}},[t._v("#")]),t._v(" Amazon S3")]),t._v(" "),s("p",[t._v("参见 "),s("a",{attrs:{href:"https://github.com/multiplegeorges/vue-cli-plugin-s3-deploy",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-cli-plugin-s3-deploy"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"firebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#firebase"}},[t._v("#")]),t._v(" Firebase")]),t._v(" "),s("p",[t._v("创建一个新的 Firebase 项目 "),s("a",{attrs:{href:"https://console.firebase.google.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Firebase console"),s("OutboundLink")],1),t._v("。 请参考"),s("a",{attrs:{href:"https://firebase.google.com/docs/web/setup",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("确保已经全局安装了 "),s("a",{attrs:{href:"https://github.com/firebase/firebase-tools",target:"_blank",rel:"noopener noreferrer"}},[t._v("firebase-tools"),s("OutboundLink")],1),t._v(" ：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm install -g firebase-tools\n")])])]),s("p",[t._v("在项目的根目录下, 用以下命令初始化 "),s("code",[t._v("firebase")]),t._v(" ：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("firebase init\n")])])]),s("p",[t._v("Firebase 将会询问有关初始化项目的一些问题。")]),t._v(" "),s("ul",[s("li",[t._v("选择需要 Firebase CLI 的功能。 一定要选择 "),s("code",[t._v("hosting")]),t._v(" 。")]),t._v(" "),s("li",[t._v("选择默认的 Firebase 项目。")]),t._v(" "),s("li",[t._v("将 "),s("code",[t._v("public")]),t._v(" 目录设为 "),s("code",[t._v("dist")]),t._v(" (或构建输出的位置) 这将会上传到 Firebase Hosting。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// firebase.json")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hosting"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"public"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dist"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("选择 "),s("code",[t._v("yes")]),t._v(" 设置项目为一个单页应用。 这将会创建一个 "),s("code",[t._v("index.html")]),t._v(" 在 "),s("code",[t._v("dist")]),t._v(" 文件夹并且配置 "),s("code",[t._v("hosting")]),t._v(" 信息。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// firebase.json")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hosting"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rewrites"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"destination"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/index.html"')]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("执行 "),s("code",[t._v("npm run build")]),t._v(" 去构建项目。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("Firebase Hosting")]),t._v(" 部署项目，执行以下命令 ：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("firebase deploy --only hosting\n")])])]),s("p",[t._v("如果需要在部署的项目中使用的其他 Firebase CLI 功能， 执行 "),s("code",[t._v("firebase deploy")]),t._v(" 去掉 "),s("code",[t._v("--only")]),t._v(" 参数。")]),t._v(" "),s("p",[t._v("现在可以到 "),s("code",[t._v("https://<YOUR-PROJECT-ID>.firebaseapp.com")]),t._v(" 访问你的项目了。")]),t._v(" "),s("p",[t._v("请参考 "),s("a",{attrs:{href:"https://firebase.google.com/docs/hosting/deploying",target:"_blank",rel:"noopener noreferrer"}},[t._v("Firebase 文档"),s("OutboundLink")],1),t._v(" 来获取更多细节。")]),t._v(" "),s("h3",{attrs:{id:"vercel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vercel"}},[t._v("#")]),t._v(" Vercel")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://vercel.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vercel"),s("OutboundLink")],1),t._v(" 是一个网站和无服务器 (Serverless) API 云平台，你可以使用你的个人域名 (或是免费的 "),s("code",[t._v(".vercel.app")]),t._v(" URL) 部署你的 Vue 项目。")]),t._v(" "),s("h4",{attrs:{id:"步骤一：安装-now-cli"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤一：安装-now-cli"}},[t._v("#")]),t._v(" 步骤一：安装 Now CLI")]),t._v(" "),s("p",[t._v("要使用 "),s("a",{attrs:{href:"https://www.npmjs.com/package/vercel",target:"_blank",rel:"noopener noreferrer"}},[t._v("npm"),s("OutboundLink")],1),t._v(" 安装其命令行界面，运行以下命令：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm install -g vercel\n")])])]),s("h4",{attrs:{id:"步骤二：部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤二：部署"}},[t._v("#")]),t._v(" 步骤二：部署")]),t._v(" "),s("p",[t._v("在项目根目录运行以下命令部署你的应用：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("vercel\n")])])]),s("p",[s("strong",[t._v("此外")]),t._v("，你还可以使用他们的 "),s("a",{attrs:{href:"https://vercel.com/github",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),s("OutboundLink")],1),t._v(" 或 "),s("a",{attrs:{href:"https://vercel.com/gitlab",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab"),s("OutboundLink")],1),t._v(" 集成服务。")]),t._v(" "),s("p",[t._v("大功告成！")]),t._v(" "),s("p",[t._v("你的站点会开始部署，你将获得一个形如 "),s("a",{attrs:{href:"https://vue.now-examples.now.sh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://vue.now-examples.now.sh/"),s("OutboundLink")],1),t._v(" （或"),s("code",[t._v(".vercel.app")]),t._v("）的链接。")]),t._v(" "),s("p",[t._v("开箱即用地，请求会被自动改写到 "),s("code",[t._v("index.html")]),t._v(" (除了自定义的静态文件) 并带有合适的缓存请求头。")]),t._v(" "),s("h3",{attrs:{id:"stdlib"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stdlib"}},[t._v("#")]),t._v(" Stdlib")]),t._v(" "),s("blockquote",[s("p",[t._v("未完成 | 欢迎参与贡献。")])]),t._v(" "),s("h3",{attrs:{id:"heroku"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#heroku"}},[t._v("#")]),t._v(" Heroku")]),t._v(" "),s("ol",[s("li",[s("p",[s("a",{attrs:{href:"https://devcenter.heroku.com/articles/heroku-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("安装 Heroku CLI"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("创建 "),s("code",[t._v("static.json")]),t._v(" 文件：")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"root"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dist"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"clean_urls"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"routes"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"/**"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.html"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("将 "),s("code",[t._v("static.json")]),t._v(" 加入 Git")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git add static.json\ngit commit -m "add static configuration"\n')])])])]),t._v(" "),s("li",[s("p",[t._v("部署到 Heroku")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("heroku login\nheroku create\nheroku buildpacks:add heroku/nodejs\nheroku buildpacks:add https://github.com/heroku/heroku-buildpack-static\ngit push heroku master\n")])])])])]),t._v(" "),s("p",[t._v("详细信息：https://gist.github.com/hone/24b06869b4c1eca701f9")]),t._v(" "),s("h3",{attrs:{id:"surge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#surge"}},[t._v("#")]),t._v(" Surge")]),t._v(" "),s("p",[t._v("要使用 "),s("a",{attrs:{href:"http://surge.sh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Surge"),s("OutboundLink")],1),t._v(" 进行部署，步骤非常简单。")]),t._v(" "),s("p",[t._v("首先，通过运行 "),s("code",[t._v("npm run build")]),t._v(" 来构建项目。如果还没有安装 Surge 的命令行工具，可以通过运行命令来执行此操作：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm install --global surge\n")])])]),s("p",[t._v("然后 cd 进入项目的 "),s("code",[t._v("dist/")]),t._v(" 文件夹，然后运行 "),s("code",[t._v("surge")]),t._v(" 并按照屏幕提示操作 。如果是第一次使用 Surge，它会要求设置电子邮件和密码。确认项目文件夹以及输入首选域来查看正在部署的项目，如下所示。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("            project: /Users/user/Documents/myawesomeproject/dist/\n         domain: myawesomeproject.surge.sh\n         upload: [====================] 100% eta: 0.0s (31 files, 494256 bytes)\n            CDN: [====================] 100%\n             IP: **.**.***.***\n\n   Success! - Published to myawesomeproject.surge.sh\n")])])]),s("p",[t._v("通过访问 "),s("code",[t._v("myawesomeproject.surge.sh")]),t._v(" 来确保你的项目已经成功的用 Surge 发布，有关自定义域名等更多设置详细信息，可以到 "),s("a",{attrs:{href:"https://surge.sh/help/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Surge's help page"),s("OutboundLink")],1),t._v(" 查看。")]),t._v(" "),s("h3",{attrs:{id:"bitbucket-cloud"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bitbucket-cloud"}},[t._v("#")]),t._v(" Bitbucket Cloud")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("如 "),s("a",{attrs:{href:"https://confluence.atlassian.com/bitbucket/publishing-a-website-on-bitbucket-cloud-221449776.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bitbucket 文档"),s("OutboundLink")],1),t._v(" 创建一个命名为 "),s("code",[t._v("<USERNAME>.bitbucket.io")]),t._v(" 的仓库。")])]),t._v(" "),s("li",[s("p",[t._v("如果你想拥有多个网站， 想要发布到主仓库的子文件夹中。这种情况下就要在 "),s("code",[t._v("vue.config.js")]),t._v(" 设置 "),s("code",[t._v("publicPath")]),t._v("。")]),t._v(" "),s("p",[t._v("如果部署到 "),s("code",[t._v("https://<USERNAME>.bitbucket.io/")]),t._v("， "),s("code",[t._v("publicPath")]),t._v(" 默认将被设为 "),s("code",[t._v('"/"')]),t._v("，你可以选择忽略它。")]),t._v(" "),s("p",[t._v("如果要部署到 "),s("code",[t._v("https://<USERNAME>.bitbucket.io/<SUBFOLDER>/")]),t._v("，设置 "),s("code",[t._v("publicPath")]),t._v(" 为 "),s("code",[t._v('"/<SUBFOLDER>/"')]),t._v("。在这种情况下，仓库的目录结构应该反映 url 结构，例如仓库应该有 "),s("code",[t._v("/<SUBFOLDER>")]),t._v(" 目录。")])]),t._v(" "),s("li",[s("p",[t._v("在项目中， "),s("code",[t._v("deploy.sh")]),t._v(" 使用以下内容创建并运行它以进行部署：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/usr/bin/env sh")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当发生错误时中止脚本")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" -e\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run build\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cd 到构建输出的目录")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" dist\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -A\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'deploy'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -f git@bitbucket.org:"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("USERNAME"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("USERNAME"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(".bitbucket.io.git master\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" -\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"docker-nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-nginx"}},[t._v("#")]),t._v(" Docker (Nginx)")]),t._v(" "),s("p",[t._v("在 Docker 容器中使用 Nginx 部署你的应用。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("安装 "),s("a",{attrs:{href:"https://www.docker.com/get-started",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("在项目根目录创建 "),s("code",[t._v("Dockerfile")]),t._v(" 文件")]),t._v(" "),s("div",{staticClass:"language-Dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ./ /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm install && npm run build\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" nginx\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" mkdir /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("from=0 /app/dist /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" nginx.conf /etc/nginx/nginx.conf\n")])])])]),t._v(" "),s("li",[s("p",[t._v("在项目根目录创建 "),s("code",[t._v(".dockerignore")]),t._v(" 文件")]),t._v(" "),s("p",[t._v("设置 "),s("code",[t._v(".dockerignore")]),t._v(" 文件能防止 "),s("code",[t._v("node_modules")]),t._v(" 和其他中间构建产物被复制到镜像中导致构建问题。")]),t._v(" "),s("div",{staticClass:"language-gitignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("**/node_modules\n**/dist\n")])])])]),t._v(" "),s("li",[s("p",[t._v("在项目根目录创建 "),s("code",[t._v("nginx.conf")]),t._v(" 文件")]),t._v(" "),s("p",[s("code",[t._v("Nginx")]),t._v(" 是一个能在 Docker 容器中运行的 HTTP(s) 服务器。它使用配置文件决定如何提供内容、要监听的端口等。参阅 "),s("a",{attrs:{href:"https://www.nginx.com/resources/wiki/start/topics/examples/full/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx 设置文档"),s("OutboundLink")],1),t._v(" 以了解所有可能的设置选项。")]),t._v(" "),s("p",[t._v("下面是一个简单的 "),s("code",[t._v("Nginx")]),t._v(" 设置文件，它会在 "),s("code",[t._v("80")]),t._v(" 端口上提供你的 Vue 项目。"),s("code",[t._v("页面未找到")]),t._v(" / "),s("code",[t._v("404")]),t._v(" 错误使用的是 "),s("code",[t._v("index.html")]),t._v("，这让我们可以使用基于 "),s("code",[t._v("pushState()")]),t._v(" 的路由。")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('user  nginx;\nworker_processes  1;\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n  worker_connections  1024;\n}\nhttp {\n  include       /etc/nginx/mime.types;\n  default_type  application/octet-stream;\n  log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                    \'$status $body_bytes_sent "$http_referer" \'\n                    \'"$http_user_agent" "$http_x_forwarded_for"\';\n  access_log  /var/log/nginx/access.log  main;\n  sendfile        on;\n  keepalive_timeout  65;\n  server {\n    listen       80;\n    server_name  localhost;\n    location / {\n      root   /app;\n      index  index.html;\n      try_files $uri $uri/ /index.html;\n    }\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n      root   /usr/share/nginx/html;\n    }\n  }\n}\n')])])])]),t._v(" "),s("li",[s("p",[t._v("构建你的 Docker 镜像")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker build "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -t my-app\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Sending build context to Docker daemon  884.7kB")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Successfully built 4b00e5ee82ae")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Successfully tagged my-app:latest")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("运行你的 Docker 镜像")]),t._v(" "),s("p",[t._v("这个例子基于官方 "),s("code",[t._v("Nginx")]),t._v(" 镜像，因此已经设置了日志重定向并关闭了自我守护进程。它也提供了其他有利于 Nginx 在 Docker 容器中运行的默认设置。更多信息参阅 "),s("a",{attrs:{href:"https://hub.docker.com/_/nginx",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx Docker 仓库"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker run -d -p "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(":80 my-app\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" localhost:8080\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <!DOCTYPE html><html lang=en>...</html>")]),t._v("\n")])])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);